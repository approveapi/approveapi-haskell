-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Auto-generated approveapi API Client
--   
--   Client library for calling the ApproveAPISwagger API based on
--   http-client.
--   
--   host: approve.sh
--   
--   base path: <a>https://approve.sh</a>
--   
--   ApproveAPISwagger API version: 1.0.1
--   
--   OpenAPI version: 3.0.0
--   
--   category: Web
@package approveapi
@version 0.1.0.0


-- | Katip Logging functions
module ApproveApi.Logging

-- | Runs a Katip logging block with the Log environment
type LogExecWithContext = forall m. MonadIO m => LogContext -> LogExec m

-- | A Katip logging block
type LogExec m = forall a. KatipT m a -> m a

-- | A Katip Log environment
type LogContext = LogEnv

-- | A Katip Log severity
type LogLevel = Severity

-- | the default log environment
initLogContext :: IO LogContext

-- | Runs a Katip logging block with the Log environment
runDefaultLogExecWithContext :: LogExecWithContext

-- | Runs a Katip logging block with the Log environment
stdoutLoggingExec :: LogExecWithContext

-- | A Katip Log environment which targets stdout
stdoutLoggingContext :: LogContext -> IO LogContext

-- | Runs a Katip logging block with the Log environment
stderrLoggingExec :: LogExecWithContext

-- | A Katip Log environment which targets stderr
stderrLoggingContext :: LogContext -> IO LogContext

-- | Disables Katip logging
runNullLogExec :: LogExecWithContext

-- | Log a katip message
_log :: (Applicative m, Katip m) => Text -> LogLevel -> Text -> m ()

-- | re-throws exceptions after logging them
logExceptions :: (Katip m, MonadCatch m, Applicative m) => Text -> m a -> m a
levelInfo :: LogLevel
levelError :: LogLevel
levelDebug :: LogLevel


module ApproveApi.MimeTypes
data ContentType a
ContentType :: a -> ContentType a
[unContentType] :: ContentType a -> a
data Accept a
Accept :: a -> Accept a
[unAccept] :: Accept a -> a
class MimeType mtype => Consumes req mtype
class MimeType mtype => Produces req mtype
data MimeJSON
MimeJSON :: MimeJSON
data MimeXML
MimeXML :: MimeXML
data MimePlainText
MimePlainText :: MimePlainText
data MimeFormUrlEncoded
MimeFormUrlEncoded :: MimeFormUrlEncoded
data MimeMultipartFormData
MimeMultipartFormData :: MimeMultipartFormData
data MimeOctetStream
MimeOctetStream :: MimeOctetStream
data MimeNoContent
MimeNoContent :: MimeNoContent
data MimeAny
MimeAny :: MimeAny

-- | A type for responses without content-body.
data NoContent
NoContent :: NoContent
class Typeable mtype => MimeType mtype
mimeTypes :: MimeType mtype => Proxy mtype -> [MediaType]
mimeType :: MimeType mtype => Proxy mtype -> Maybe MediaType
mimeType' :: MimeType mtype => mtype -> Maybe MediaType
mimeTypes' :: MimeType mtype => mtype -> [MediaType]
class MimeType mtype => MimeRender mtype x
mimeRender :: MimeRender mtype x => Proxy mtype -> x -> ByteString
mimeRender' :: MimeRender mtype x => mtype -> x -> ByteString
mimeRenderDefaultMultipartFormData :: ToHttpApiData a => a -> ByteString
class MimeType mtype => MimeUnrender mtype o
mimeUnrender :: MimeUnrender mtype o => Proxy mtype -> ByteString -> Either String o
mimeUnrender' :: MimeUnrender mtype o => mtype -> ByteString -> Either String o
instance GHC.Classes.Eq ApproveApi.MimeTypes.NoContent
instance GHC.Show.Show ApproveApi.MimeTypes.NoContent
instance Data.Aeson.Types.FromJSON.FromJSON a => ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimeJSON a
instance Web.Internal.FormUrlEncoded.FromForm a => ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimeFormUrlEncoded a
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimePlainText Data.ByteString.Lazy.Internal.ByteString
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimePlainText Data.Text.Internal.Text
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimePlainText GHC.Base.String
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimeOctetStream Data.ByteString.Lazy.Internal.ByteString
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimeOctetStream Data.Text.Internal.Text
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimeOctetStream GHC.Base.String
instance ApproveApi.MimeTypes.MimeUnrender ApproveApi.MimeTypes.MimeNoContent ApproveApi.MimeTypes.NoContent
instance Data.Aeson.Types.ToJSON.ToJSON a => ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeJSON a
instance Web.Internal.FormUrlEncoded.ToForm a => ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeFormUrlEncoded a
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimePlainText Data.ByteString.Lazy.Internal.ByteString
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimePlainText Data.Text.Internal.Text
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimePlainText GHC.Base.String
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeOctetStream Data.ByteString.Lazy.Internal.ByteString
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeOctetStream Data.Text.Internal.Text
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeOctetStream GHC.Base.String
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData Data.ByteString.Lazy.Internal.ByteString
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Types.Bool
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Types.Char
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Types.Double
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Types.Float
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Types.Int
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Integer.Type.Integer
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData GHC.Base.String
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData Data.Text.Internal.Text
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeNoContent ApproveApi.MimeTypes.NoContent
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeJSON
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeXML
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeFormUrlEncoded
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeMultipartFormData
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimePlainText
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeOctetStream
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeAny
instance ApproveApi.MimeTypes.MimeType ApproveApi.MimeTypes.MimeNoContent


module ApproveApi.Core

data ApproveApiConfig
ApproveApiConfig :: ByteString -> Text -> LogExecWithContext -> LogContext -> [AnyAuthMethod] -> Bool -> ApproveApiConfig

-- | host supplied in the Request
[configHost] :: ApproveApiConfig -> ByteString

-- | user-agent supplied in the Request
[configUserAgent] :: ApproveApiConfig -> Text

-- | Run a block using a Logger instance
[configLogExecWithContext] :: ApproveApiConfig -> LogExecWithContext

-- | Configures the logger
[configLogContext] :: ApproveApiConfig -> LogContext

-- | List of configured auth methods
[configAuthMethods] :: ApproveApiConfig -> [AnyAuthMethod]

-- | throw exceptions if auth methods are not configured
[configValidateAuthMethods] :: ApproveApiConfig -> Bool

-- | constructs a default ApproveApiConfig
--   
--   configHost:
--   
--   <pre>
--   <a>https://approve.sh</a>
--   </pre>
--   
--   configUserAgent:
--   
--   <pre>
--   "approveapi/0.1.0.0"
--   </pre>
newConfig :: IO ApproveApiConfig

-- | updates config use AuthMethod on matching requests
addAuthMethod :: AuthMethod auth => ApproveApiConfig -> auth -> ApproveApiConfig

-- | updates the config to use stdout logging
withStdoutLogging :: ApproveApiConfig -> IO ApproveApiConfig

-- | updates the config to use stderr logging
withStderrLogging :: ApproveApiConfig -> IO ApproveApiConfig

-- | updates the config to disable logging
withNoLogging :: ApproveApiConfig -> ApproveApiConfig

-- | Represents a request.
--   
--   Type Variables:
--   
--   <ul>
--   <li>req - request operation</li>
--   <li>contentType - <a>MimeType</a> associated with request body</li>
--   <li>res - response model</li>
--   <li>accept - <a>MimeType</a> associated with response body</li>
--   </ul>
data ApproveApiRequest req contentType res accept
ApproveApiRequest :: Method -> [ByteString] -> Params -> [TypeRep] -> ApproveApiRequest req contentType res accept

-- | Method of ApproveApiRequest
[rMethod] :: ApproveApiRequest req contentType res accept -> Method

-- | Endpoint of ApproveApiRequest
[rUrlPath] :: ApproveApiRequest req contentType res accept -> [ByteString]

-- | params of ApproveApiRequest
[rParams] :: ApproveApiRequest req contentType res accept -> Params

-- | types of auth methods
[rAuthTypes] :: ApproveApiRequest req contentType res accept -> [TypeRep]

-- | <a>rMethod</a> Lens
rMethodL :: Lens_' (ApproveApiRequest req contentType res accept) Method

-- | <a>rUrlPath</a> Lens
rUrlPathL :: Lens_' (ApproveApiRequest req contentType res accept) [ByteString]

-- | <a>rParams</a> Lens
rParamsL :: Lens_' (ApproveApiRequest req contentType res accept) Params

-- | <a>rParams</a> Lens
rAuthTypesL :: Lens_' (ApproveApiRequest req contentType res accept) [TypeRep]

-- | Designates the body parameter of a request
class HasBodyParam req param
setBodyParam :: forall contentType res accept. (HasBodyParam req param, Consumes req contentType, MimeRender contentType param) => ApproveApiRequest req contentType res accept -> param -> ApproveApiRequest req contentType res accept

-- | Designates the optional parameters of a request
class HasOptionalParam req param

-- | Apply an optional parameter to a request
applyOptionalParam :: HasOptionalParam req param => ApproveApiRequest req contentType res accept -> param -> ApproveApiRequest req contentType res accept

-- | infix operator / alias for <tt>addOptionalParam</tt>
(-&-) :: HasOptionalParam req param => ApproveApiRequest req contentType res accept -> param -> ApproveApiRequest req contentType res accept

-- | Request Params
data Params
Params :: Query -> RequestHeaders -> ParamBody -> Params
[paramsQuery] :: Params -> Query
[paramsHeaders] :: Params -> RequestHeaders
[paramsBody] :: Params -> ParamBody

-- | <a>paramsQuery</a> Lens
paramsQueryL :: Lens_' Params Query

-- | <a>paramsHeaders</a> Lens
paramsHeadersL :: Lens_' Params RequestHeaders

-- | <a>paramsBody</a> Lens
paramsBodyL :: Lens_' Params ParamBody

-- | Request Body
data ParamBody
ParamBodyNone :: ParamBody
ParamBodyB :: ByteString -> ParamBody
ParamBodyBL :: ByteString -> ParamBody
ParamBodyFormUrlEncoded :: Form -> ParamBody
ParamBodyMultipartFormData :: [Part] -> ParamBody
_mkRequest :: Method -> [ByteString] -> ApproveApiRequest req contentType res accept
_mkParams :: Params
setHeader :: ApproveApiRequest req contentType res accept -> [Header] -> ApproveApiRequest req contentType res accept
removeHeader :: ApproveApiRequest req contentType res accept -> [HeaderName] -> ApproveApiRequest req contentType res accept
_setContentTypeHeader :: forall req contentType res accept. MimeType contentType => ApproveApiRequest req contentType res accept -> ApproveApiRequest req contentType res accept
_setAcceptHeader :: forall req contentType res accept. MimeType accept => ApproveApiRequest req contentType res accept -> ApproveApiRequest req contentType res accept
setQuery :: ApproveApiRequest req contentType res accept -> [QueryItem] -> ApproveApiRequest req contentType res accept
addForm :: ApproveApiRequest req contentType res accept -> Form -> ApproveApiRequest req contentType res accept
_addMultiFormPart :: ApproveApiRequest req contentType res accept -> Part -> ApproveApiRequest req contentType res accept
_setBodyBS :: ApproveApiRequest req contentType res accept -> ByteString -> ApproveApiRequest req contentType res accept
_setBodyLBS :: ApproveApiRequest req contentType res accept -> ByteString -> ApproveApiRequest req contentType res accept
_hasAuthType :: AuthMethod authMethod => ApproveApiRequest req contentType res accept -> Proxy authMethod -> ApproveApiRequest req contentType res accept
toPath :: ToHttpApiData a => a -> ByteString
toHeader :: ToHttpApiData a => (HeaderName, a) -> [Header]
toForm :: ToHttpApiData v => (ByteString, v) -> Form
toQuery :: ToHttpApiData a => (ByteString, Maybe a) -> [QueryItem]

-- | Determines the format of the array if type array is used.
data CollectionFormat

-- | CSV format for multiple parameters.
CommaSeparated :: CollectionFormat

-- | Also called <a>SSV</a>
SpaceSeparated :: CollectionFormat

-- | Also called <a>TSV</a>
TabSeparated :: CollectionFormat

-- | `value1|value2|value2`
PipeSeparated :: CollectionFormat

-- | Using multiple GET parameters, e.g. `foo=bar&amp;foo=baz`. This is
--   valid only for parameters in "query" (<a>Query</a>) or "formData"
--   (<a>Form</a>)
MultiParamArray :: CollectionFormat
toHeaderColl :: ToHttpApiData a => CollectionFormat -> (HeaderName, [a]) -> [Header]
toFormColl :: ToHttpApiData v => CollectionFormat -> (ByteString, [v]) -> Form
toQueryColl :: ToHttpApiData a => CollectionFormat -> (ByteString, Maybe [a]) -> Query
_toColl :: Traversable f => CollectionFormat -> (f a -> [(b, ByteString)]) -> f [a] -> [(b, ByteString)]
_toCollA :: (Traversable f, Traversable t, Alternative t) => CollectionFormat -> (f (t a) -> [(b, t ByteString)]) -> f (t [a]) -> [(b, t ByteString)]
_toCollA' :: (Monoid c, Traversable f, Traversable t, Alternative t) => CollectionFormat -> (f (t a) -> [(b, t c)]) -> (Char -> c) -> f (t [a]) -> [(b, t c)]

-- | Provides a method to apply auth methods to requests
class Typeable a => AuthMethod a
applyAuthMethod :: AuthMethod a => ApproveApiConfig -> a -> ApproveApiRequest req contentType res accept -> IO (ApproveApiRequest req contentType res accept)

-- | An existential wrapper for any AuthMethod
data AnyAuthMethod
AnyAuthMethod :: a -> AnyAuthMethod

-- | indicates exceptions related to AuthMethods
data AuthMethodException
AuthMethodException :: String -> AuthMethodException

-- | apply all matching AuthMethods in config to request
_applyAuthMethods :: ApproveApiRequest req contentType res accept -> ApproveApiConfig -> IO (ApproveApiRequest req contentType res accept)

-- | Removes Null fields. (OpenAPI-Specification 2.0 does not allow Null in
--   JSON)
_omitNulls :: [(Text, Value)] -> Value

-- | Encodes fields using WH.toQueryParam
_toFormItem :: (ToHttpApiData a, Functor f) => t -> f a -> f (t, [Text])

-- | Collapse (Just "") to Nothing
_emptyToNothing :: Maybe String -> Maybe String

-- | Collapse (Just mempty) to Nothing
_memptyToNothing :: (Monoid a, Eq a) => Maybe a -> Maybe a
newtype DateTime
DateTime :: UTCTime -> DateTime
[unDateTime] :: DateTime -> UTCTime

-- | <pre>
--   _parseISO8601
--   </pre>
_readDateTime :: (ParseTime t, Monad m, Alternative m) => String -> m t

-- | <pre>
--   TI.formatISO8601Millis
--   </pre>
_showDateTime :: (t ~ UTCTime, FormatTime t) => t -> String

-- | parse an ISO8601 date-time string
_parseISO8601 :: (ParseTime t, Monad m, Alternative m) => String -> m t
newtype Date
Date :: Day -> Date
[unDate] :: Date -> Day

-- | <pre>
--   TI.parseTimeM True TI.defaultTimeLocale "%Y-%m-%d"
--   </pre>
_readDate :: (ParseTime t, Monad m) => String -> m t

-- | <pre>
--   TI.formatTime TI.defaultTimeLocale "%Y-%m-%d"
--   </pre>
_showDate :: FormatTime t => t -> String

-- | base64 encoded characters
newtype ByteArray
ByteArray :: ByteString -> ByteArray
[unByteArray] :: ByteArray -> ByteString

-- | read base64 encoded characters
_readByteArray :: Monad m => Text -> m ByteArray

-- | show base64 encoded characters
_showByteArray :: ByteArray -> Text

-- | any sequence of octets
newtype Binary
Binary :: ByteString -> Binary
[unBinary] :: Binary -> ByteString
_readBinaryBase64 :: Monad m => Text -> m Binary
_showBinaryBase64 :: Binary -> Text
type Lens_' s a = Lens_ s s a a
type Lens_ s t a b = forall (f :: * -> *). Functor f => (a -> f b) -> s -> f t
instance Control.DeepSeq.NFData ApproveApi.Core.Binary
instance GHC.Classes.Ord ApproveApi.Core.Binary
instance Data.Data.Data ApproveApi.Core.Binary
instance GHC.Classes.Eq ApproveApi.Core.Binary
instance Control.DeepSeq.NFData ApproveApi.Core.ByteArray
instance GHC.Classes.Ord ApproveApi.Core.ByteArray
instance Data.Data.Data ApproveApi.Core.ByteArray
instance GHC.Classes.Eq ApproveApi.Core.ByteArray
instance Data.Time.Format.FormatTime ApproveApi.Core.Date
instance Data.Time.Format.Parse.ParseTime ApproveApi.Core.Date
instance Control.DeepSeq.NFData ApproveApi.Core.Date
instance GHC.Arr.Ix ApproveApi.Core.Date
instance GHC.Classes.Ord ApproveApi.Core.Date
instance Data.Data.Data ApproveApi.Core.Date
instance GHC.Classes.Eq ApproveApi.Core.Date
instance GHC.Enum.Enum ApproveApi.Core.Date
instance Data.Time.Format.FormatTime ApproveApi.Core.DateTime
instance Data.Time.Format.Parse.ParseTime ApproveApi.Core.DateTime
instance Control.DeepSeq.NFData ApproveApi.Core.DateTime
instance GHC.Classes.Ord ApproveApi.Core.DateTime
instance Data.Data.Data ApproveApi.Core.DateTime
instance GHC.Classes.Eq ApproveApi.Core.DateTime
instance GHC.Show.Show ApproveApi.Core.AuthMethodException
instance GHC.Show.Show (ApproveApi.Core.ApproveApiRequest req contentType res accept)
instance GHC.Show.Show ApproveApi.Core.Params
instance GHC.Show.Show ApproveApi.Core.ParamBody
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Core.Binary
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Core.Binary
instance Web.Internal.HttpApiData.FromHttpApiData ApproveApi.Core.Binary
instance Web.Internal.HttpApiData.ToHttpApiData ApproveApi.Core.Binary
instance GHC.Show.Show ApproveApi.Core.Binary
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData ApproveApi.Core.Binary
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Core.ByteArray
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Core.ByteArray
instance Web.Internal.HttpApiData.FromHttpApiData ApproveApi.Core.ByteArray
instance Web.Internal.HttpApiData.ToHttpApiData ApproveApi.Core.ByteArray
instance GHC.Show.Show ApproveApi.Core.ByteArray
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData ApproveApi.Core.ByteArray
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Core.Date
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Core.Date
instance Web.Internal.HttpApiData.FromHttpApiData ApproveApi.Core.Date
instance Web.Internal.HttpApiData.ToHttpApiData ApproveApi.Core.Date
instance GHC.Show.Show ApproveApi.Core.Date
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData ApproveApi.Core.Date
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Core.DateTime
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Core.DateTime
instance Web.Internal.HttpApiData.FromHttpApiData ApproveApi.Core.DateTime
instance Web.Internal.HttpApiData.ToHttpApiData ApproveApi.Core.DateTime
instance GHC.Show.Show ApproveApi.Core.DateTime
instance ApproveApi.MimeTypes.MimeRender ApproveApi.MimeTypes.MimeMultipartFormData ApproveApi.Core.DateTime
instance GHC.Exception.Exception ApproveApi.Core.AuthMethodException
instance GHC.Show.Show ApproveApi.Core.ApproveApiConfig
instance ApproveApi.Core.AuthMethod ApproveApi.Core.AnyAuthMethod


module ApproveApi.Client

-- | send a request returning the raw http response
dispatchLbs :: (Produces req accept, MimeType contentType) => Manager -> ApproveApiConfig -> ApproveApiRequest req contentType res accept -> IO (Response ByteString)

-- | pair of decoded http body and http response
data MimeResult res
MimeResult :: Either MimeError res -> Response ByteString -> MimeResult res

-- | decoded http body
[mimeResult] :: MimeResult res -> Either MimeError res

-- | http response
[mimeResultResponse] :: MimeResult res -> Response ByteString

-- | pair of unrender/parser error and http response
data MimeError
MimeError :: String -> Response ByteString -> MimeError

-- | unrender/parser error
[mimeError] :: MimeError -> String

-- | http response
[mimeErrorResponse] :: MimeError -> Response ByteString

-- | send a request returning the <a>MimeResult</a>
dispatchMime :: forall req contentType res accept. (Produces req accept, MimeUnrender accept res, MimeType contentType) => Manager -> ApproveApiConfig -> ApproveApiRequest req contentType res accept -> IO (MimeResult res)

-- | like <a>dispatchMime</a>, but only returns the decoded http body
dispatchMime' :: (Produces req accept, MimeUnrender accept res, MimeType contentType) => Manager -> ApproveApiConfig -> ApproveApiRequest req contentType res accept -> IO (Either MimeError res)

-- | like <tt>dispatchReqLbs</tt>, but does not validate the operation is a
--   <tt>Producer</tt> of the "accept" <a>MimeType</a>. (Useful if the
--   server's response is undocumented)
dispatchLbsUnsafe :: (MimeType accept, MimeType contentType) => Manager -> ApproveApiConfig -> ApproveApiRequest req contentType res accept -> IO (Response ByteString)

-- | dispatch an InitRequest
dispatchInitUnsafe :: Manager -> ApproveApiConfig -> InitRequest req contentType res accept -> IO (Response ByteString)

-- | wraps an http-client <tt>Request</tt> with request/response type
--   parameters
newtype InitRequest req contentType res accept
InitRequest :: Request -> InitRequest req contentType res accept
[unInitRequest] :: InitRequest req contentType res accept -> Request

-- | Build an http-client <tt>Request</tt> record from the supplied config
--   and request
_toInitRequest :: (MimeType accept, MimeType contentType) => ApproveApiConfig -> ApproveApiRequest req contentType res accept -> IO (InitRequest req contentType res accept)

-- | modify the underlying Request
modifyInitRequest :: InitRequest req contentType res accept -> (Request -> Request) -> InitRequest req contentType res accept

-- | modify the underlying Request (monadic)
modifyInitRequestM :: Monad m => InitRequest req contentType res accept -> (Request -> m Request) -> m (InitRequest req contentType res accept)

-- | Run a block using the configured logger instance
runConfigLog :: MonadIO m => ApproveApiConfig -> LogExec m

-- | Run a block using the configured logger instance (logs exceptions)
runConfigLogWithExceptions :: (MonadCatch m, MonadIO m) => Text -> ApproveApiConfig -> LogExec m
instance GHC.Show.Show (ApproveApi.Client.InitRequest req contentType res accept)
instance Data.Traversable.Traversable ApproveApi.Client.MimeResult
instance Data.Foldable.Foldable ApproveApi.Client.MimeResult
instance GHC.Base.Functor ApproveApi.Client.MimeResult
instance GHC.Show.Show res => GHC.Show.Show (ApproveApi.Client.MimeResult res)
instance GHC.Show.Show ApproveApi.Client.MimeError
instance GHC.Classes.Eq ApproveApi.Client.MimeError


module ApproveApi.Model
newtype Id
Id :: Text -> Id
[unId] :: Id -> Text
newtype LongPoll
LongPoll :: Bool -> LongPoll
[unLongPoll] :: LongPoll -> Bool

-- | AnswerMetadata
data AnswerMetadata
AnswerMetadata :: !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> AnswerMetadata

-- | "ip_address"
[answerMetadataIpAddress] :: AnswerMetadata -> !(Maybe Text)

-- | "browser"
[answerMetadataBrowser] :: AnswerMetadata -> !(Maybe Text)

-- | "operating_system"
[answerMetadataOperatingSystem] :: AnswerMetadata -> !(Maybe Text)

-- | Construct a value of type <a>AnswerMetadata</a> (by applying it's
--   required fields, if any)
mkAnswerMetadata :: AnswerMetadata

-- | CreatePromptRequest
data CreatePromptRequest
CreatePromptRequest :: !(Text) -> !(Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Bool) -> !(Maybe Double) -> !(Maybe PromptMetadata) -> CreatePromptRequest

-- | <i>Required</i> "user" - The user to send the approval request to. Can
--   be either an email address or a phone number.
[createPromptRequestUser] :: CreatePromptRequest -> !(Text)

-- | <i>Required</i> "body" - The body of the approval request to show the
--   user.
[createPromptRequestBody] :: CreatePromptRequest -> !(Text)

-- | "title" - The title of an approval request. Defaults to an empty
--   string.
[createPromptRequestTitle] :: CreatePromptRequest -> !(Maybe Text)

-- | "approve_text" - The approve action text. Defaults to 'Approve'.
[createPromptRequestApproveText] :: CreatePromptRequest -> !(Maybe Text)

-- | "approve_redirect_url" - An HTTPS URL to redirect the user to if the
--   prompt is approved. This URL is kept secret until the user is
--   redirected to it.
[createPromptRequestApproveRedirectUrl] :: CreatePromptRequest -> !(Maybe Text)

-- | "reject_text" - The reject action text. If not specified the reject
--   button will NOT be rendered, and the user will only see an approve
--   action button.
[createPromptRequestRejectText] :: CreatePromptRequest -> !(Maybe Text)

-- | "reject_redirect_url" - An HTTPS URL to redirect the user to if the
--   prompt is rejected. This URL is kept secret until the user is
--   redirected to it.
[createPromptRequestRejectRedirectUrl] :: CreatePromptRequest -> !(Maybe Text)

-- | "long_poll" - If true, the request waits (long-polls) until the user
--   responds to the prompt or more than 10 minutes pass. Defaults to
--   false.
[createPromptRequestLongPoll] :: CreatePromptRequest -> !(Maybe Bool)

-- | "expires_in" - The number of seconds until this request can no longer
--   be answered.
[createPromptRequestExpiresIn] :: CreatePromptRequest -> !(Maybe Double)

-- | "metadata"
[createPromptRequestMetadata] :: CreatePromptRequest -> !(Maybe PromptMetadata)

-- | Construct a value of type <a>CreatePromptRequest</a> (by applying it's
--   required fields, if any)
mkCreatePromptRequest :: Text -> Text -> CreatePromptRequest

-- | Error
data Error
Error :: !(Text) -> Error

-- | <i>Required</i> "error" - A human readable API error message.
[errorError] :: Error -> !(Text)

-- | Construct a value of type <a>Error</a> (by applying it's required
--   fields, if any)
mkError :: Text -> Error

-- | Prompt
data Prompt
Prompt :: !(Text) -> !(Double) -> !(Bool) -> !(Maybe PromptAnswer) -> !(Maybe PromptMetadata) -> Prompt

-- | <i>Required</i> "id" - A unique id for this prompt.
[promptId] :: Prompt -> !(Text)

-- | <i>Required</i> "sent_at" - The unix timestamp when this prompt was
--   sent.
[promptSentAt] :: Prompt -> !(Double)

-- | <i>Required</i> "is_expired" - Whether the prompt can still be
--   answered.
[promptIsExpired] :: Prompt -> !(Bool)

-- | "answer"
[promptAnswer] :: Prompt -> !(Maybe PromptAnswer)

-- | "metadata"
[promptMetadata] :: Prompt -> !(Maybe PromptMetadata)

-- | Construct a value of type <a>Prompt</a> (by applying it's required
--   fields, if any)
mkPrompt :: Text -> Double -> Bool -> Prompt

-- | PromptAnswer
data PromptAnswer
PromptAnswer :: !(Bool) -> !(Double) -> !(Maybe AnswerMetadata) -> PromptAnswer

-- | <i>Required</i> "result" - The user's answer to whether or not they
--   approve this prompt.
[promptAnswerResult] :: PromptAnswer -> !(Bool)

-- | <i>Required</i> "time" - The unix timestamp when the user answered the
--   prompt.
[promptAnswerTime] :: PromptAnswer -> !(Double)

-- | "metadata"
[promptAnswerMetadata] :: PromptAnswer -> !(Maybe AnswerMetadata)

-- | Construct a value of type <a>PromptAnswer</a> (by applying it's
--   required fields, if any)
mkPromptAnswer :: Bool -> Double -> PromptAnswer

-- | PromptMetadata
data PromptMetadata
PromptMetadata :: !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> PromptMetadata

-- | "location" - The physical location, like Oakland, CA, of the action.
[promptMetadataLocation] :: PromptMetadata -> !(Maybe Text)

-- | "time" - The date/time of the action.
[promptMetadataTime] :: PromptMetadata -> !(Maybe Text)

-- | "ip_address" - The IP address of the computer initiating the action.
[promptMetadataIpAddress] :: PromptMetadata -> !(Maybe Text)

-- | "browser" - The web browser initiating the action, i.e. Chrome.
[promptMetadataBrowser] :: PromptMetadata -> !(Maybe Text)

-- | "operating_system" - The operating system initiating the action, i.e.
--   Mac OS X.
[promptMetadataOperatingSystem] :: PromptMetadata -> !(Maybe Text)

-- | Construct a value of type <a>PromptMetadata</a> (by applying it's
--   required fields, if any)
mkPromptMetadata :: PromptMetadata

-- | PromptStatus
data PromptStatus
PromptStatus :: !(Bool) -> !(Bool) -> PromptStatus

-- | <i>Required</i> "is_answered" - Whether the prompt has been answered
--   or not.
[promptStatusIsAnswered] :: PromptStatus -> !(Bool)

-- | <i>Required</i> "is_expired" - Whether the prompt can still be
--   answered.
[promptStatusIsExpired] :: PromptStatus -> !(Bool)

-- | Construct a value of type <a>PromptStatus</a> (by applying it's
--   required fields, if any)
mkPromptStatus :: Bool -> Bool -> PromptStatus
data AuthBasicApiKey

-- | username password
AuthBasicApiKey :: ByteString -> ByteString -> AuthBasicApiKey
instance GHC.Show.Show ApproveApi.Model.AuthBasicApiKey
instance GHC.Classes.Eq ApproveApi.Model.AuthBasicApiKey
instance GHC.Classes.Eq ApproveApi.Model.PromptStatus
instance GHC.Show.Show ApproveApi.Model.PromptStatus
instance GHC.Classes.Eq ApproveApi.Model.CreatePromptRequest
instance GHC.Show.Show ApproveApi.Model.CreatePromptRequest
instance GHC.Classes.Eq ApproveApi.Model.Prompt
instance GHC.Show.Show ApproveApi.Model.Prompt
instance GHC.Classes.Eq ApproveApi.Model.PromptMetadata
instance GHC.Show.Show ApproveApi.Model.PromptMetadata
instance GHC.Classes.Eq ApproveApi.Model.PromptAnswer
instance GHC.Show.Show ApproveApi.Model.PromptAnswer
instance GHC.Classes.Eq ApproveApi.Model.Error
instance GHC.Show.Show ApproveApi.Model.Error
instance GHC.Classes.Eq ApproveApi.Model.AnswerMetadata
instance GHC.Show.Show ApproveApi.Model.AnswerMetadata
instance GHC.Show.Show ApproveApi.Model.LongPoll
instance GHC.Classes.Eq ApproveApi.Model.LongPoll
instance GHC.Show.Show ApproveApi.Model.Id
instance GHC.Classes.Eq ApproveApi.Model.Id
instance ApproveApi.Core.AuthMethod ApproveApi.Model.AuthBasicApiKey
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.PromptStatus
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.PromptStatus
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.CreatePromptRequest
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.CreatePromptRequest
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.Prompt
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.Prompt
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.PromptMetadata
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.PromptMetadata
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.PromptAnswer
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.PromptAnswer
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.Error
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.Error
instance Data.Aeson.Types.FromJSON.FromJSON ApproveApi.Model.AnswerMetadata
instance Data.Aeson.Types.ToJSON.ToJSON ApproveApi.Model.AnswerMetadata


module ApproveApi.API.Approve

-- | <pre>
--   POST /prompt
--   </pre>
--   
--   Sending a prompt
--   
--   Creates a prompt and pushes it to the user (sends via email, sms, or
--   other supported protocols).
--   
--   AuthMethod: <a>AuthBasicApiKey</a>
createPrompt :: (Consumes CreatePrompt MimeJSON, MimeRender MimeJSON CreatePromptRequest) => CreatePromptRequest -> ApproveApiRequest CreatePrompt MimeJSON Prompt MimeJSON
data CreatePrompt

-- | <pre>
--   GET /prompt/{id}
--   </pre>
--   
--   Retrieve a prompt
--   
--   Retrieve the prompt object with the given ID.
--   
--   AuthMethod: <a>AuthBasicApiKey</a>
getPrompt :: Id -> ApproveApiRequest GetPrompt MimeNoContent Prompt MimeJSON
data GetPrompt

-- | <pre>
--   GET /prompt/{id}/status
--   </pre>
--   
--   Check prompt status
--   
--   Returns whether a prompt has been completed by the user. This request
--   does not require authentication, and so can be used client-side
--   without sharing API credentials.
getPromptStatus :: Id -> ApproveApiRequest GetPromptStatus MimeNoContent PromptStatus MimeJSON
data GetPromptStatus
instance ApproveApi.MimeTypes.Produces ApproveApi.API.Approve.GetPromptStatus ApproveApi.MimeTypes.MimeJSON
instance ApproveApi.Core.HasOptionalParam ApproveApi.API.Approve.GetPrompt ApproveApi.Model.LongPoll
instance ApproveApi.MimeTypes.Produces ApproveApi.API.Approve.GetPrompt ApproveApi.MimeTypes.MimeJSON
instance ApproveApi.Core.HasBodyParam ApproveApi.API.Approve.CreatePrompt ApproveApi.Model.CreatePromptRequest
instance ApproveApi.MimeTypes.Consumes ApproveApi.API.Approve.CreatePrompt ApproveApi.MimeTypes.MimeJSON
instance ApproveApi.MimeTypes.Produces ApproveApi.API.Approve.CreatePrompt ApproveApi.MimeTypes.MimeJSON


module ApproveApi.ModelLens

-- | <a>answerMetadataIpAddress</a> Lens
answerMetadataIpAddressL :: Lens_' AnswerMetadata (Maybe Text)

-- | <a>answerMetadataBrowser</a> Lens
answerMetadataBrowserL :: Lens_' AnswerMetadata (Maybe Text)

-- | <a>answerMetadataOperatingSystem</a> Lens
answerMetadataOperatingSystemL :: Lens_' AnswerMetadata (Maybe Text)

-- | <a>createPromptRequestUser</a> Lens
createPromptRequestUserL :: Lens_' CreatePromptRequest (Text)

-- | <a>createPromptRequestBody</a> Lens
createPromptRequestBodyL :: Lens_' CreatePromptRequest (Text)

-- | <a>createPromptRequestTitle</a> Lens
createPromptRequestTitleL :: Lens_' CreatePromptRequest (Maybe Text)

-- | <a>createPromptRequestApproveText</a> Lens
createPromptRequestApproveTextL :: Lens_' CreatePromptRequest (Maybe Text)

-- | <a>createPromptRequestApproveRedirectUrl</a> Lens
createPromptRequestApproveRedirectUrlL :: Lens_' CreatePromptRequest (Maybe Text)

-- | <a>createPromptRequestRejectText</a> Lens
createPromptRequestRejectTextL :: Lens_' CreatePromptRequest (Maybe Text)

-- | <a>createPromptRequestRejectRedirectUrl</a> Lens
createPromptRequestRejectRedirectUrlL :: Lens_' CreatePromptRequest (Maybe Text)

-- | <a>createPromptRequestLongPoll</a> Lens
createPromptRequestLongPollL :: Lens_' CreatePromptRequest (Maybe Bool)

-- | <a>createPromptRequestExpiresIn</a> Lens
createPromptRequestExpiresInL :: Lens_' CreatePromptRequest (Maybe Double)

-- | <a>createPromptRequestMetadata</a> Lens
createPromptRequestMetadataL :: Lens_' CreatePromptRequest (Maybe PromptMetadata)

-- | <a>errorError</a> Lens
errorErrorL :: Lens_' Error (Text)

-- | <a>promptId</a> Lens
promptIdL :: Lens_' Prompt (Text)

-- | <a>promptSentAt</a> Lens
promptSentAtL :: Lens_' Prompt (Double)

-- | <a>promptIsExpired</a> Lens
promptIsExpiredL :: Lens_' Prompt (Bool)

-- | <a>promptAnswer</a> Lens
promptAnswerL :: Lens_' Prompt (Maybe PromptAnswer)

-- | <a>promptMetadata</a> Lens
promptMetadataL :: Lens_' Prompt (Maybe PromptMetadata)

-- | <a>promptAnswerResult</a> Lens
promptAnswerResultL :: Lens_' PromptAnswer (Bool)

-- | <a>promptAnswerTime</a> Lens
promptAnswerTimeL :: Lens_' PromptAnswer (Double)

-- | <a>promptAnswerMetadata</a> Lens
promptAnswerMetadataL :: Lens_' PromptAnswer (Maybe AnswerMetadata)

-- | <a>promptMetadataLocation</a> Lens
promptMetadataLocationL :: Lens_' PromptMetadata (Maybe Text)

-- | <a>promptMetadataTime</a> Lens
promptMetadataTimeL :: Lens_' PromptMetadata (Maybe Text)

-- | <a>promptMetadataIpAddress</a> Lens
promptMetadataIpAddressL :: Lens_' PromptMetadata (Maybe Text)

-- | <a>promptMetadataBrowser</a> Lens
promptMetadataBrowserL :: Lens_' PromptMetadata (Maybe Text)

-- | <a>promptMetadataOperatingSystem</a> Lens
promptMetadataOperatingSystemL :: Lens_' PromptMetadata (Maybe Text)

-- | <a>promptStatusIsAnswered</a> Lens
promptStatusIsAnsweredL :: Lens_' PromptStatus (Bool)

-- | <a>promptStatusIsExpired</a> Lens
promptStatusIsExpiredL :: Lens_' PromptStatus (Bool)


module ApproveApi
